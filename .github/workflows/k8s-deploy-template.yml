name: Reusable Kubernetes Deploy
on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      helm_repository:
        required: false
        type: string
      helm_chart:
        required: false
        type: string
      helm_version:
        required: false
        type: string
      pr_deployments:
        required: false
        type: boolean
        default: true
      values_path:
        required: false
        type: string
        default: "helm/values"
      dev_domain:
        required: true
        type: string
      live_domain:
        required: false
        type: string
      traefik_dashboard:
        required: false
        type: boolean
        default: false
      root_ca:
        required: false
        type: string
        default: ""
      custom_deployment:
        required: false
        type: boolean
        default: false
      test_url_path:
        required: false
        type: string
        default: ""
    secrets:
      KUBE_CONFIG_DEV:
        required: true
      KUBE_CONFIG_LIVE:
        required: true

jobs:
  deploy:
    runs-on: self-hosted-ubuntu-24.10
    environment: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
    container:
      image: ghcr.io/jhofer-cloud/helm-ci:dev
    steps:
      - name: Set deployment variables
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "stage=live" >> $GITHUB_OUTPUT
            echo "env=Production" >> $GITHUB_OUTPUT
            echo "domain=${{ inputs.live_domain }}" >> $GITHUB_OUTPUT
          else
            echo "stage=dev" >> $GITHUB_OUTPUT
            echo "env=Development" >> $GITHUB_OUTPUT
            echo "domain=${{ inputs.dev_domain }}" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Kubernetes Tools
        uses: yokawasa/action-setup-kube-tools@v0.11.2
        with:
          kubectl: "1.27.3"
          helm: "3.12.3"
      - name: Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "${{ secrets.KUBE_CONFIG_LIVE }}" > ~/.kube/config
          else
            echo "${{ secrets.KUBE_CONFIG_DEV }}" > ~/.kube/config
          fi
          chmod 600 ~/.kube/config
      - name: Run deployment
        id: deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          deploy \
            --stage ${{ steps.vars.outputs.stage }} \
            --app=${{ inputs.app_name }} \
            --env=${{ steps.vars.outputs.env }} \
            --pr=${{ github.event.pull_request.number }} \
            --values=${{ inputs.values_path }} \
            --chart=${{ inputs.helm_chart }} \
            --version=${{ inputs.helm_version }} \
            --repo=${{ inputs.helm_repository }} \
            --domain=${{ steps.vars.outputs.domain }} \
            --traefik-dashboard=${{ inputs.traefik_dashboard }} \
            --root-ca=${{ inputs.root_ca }} \
            --pr-deployments=${{ inputs.pr_deployments }} \
            --custom=${{ inputs.custom_deployment }}
      - name: Check domain accessibility
        id: check_domain
        run: |
          if [ "${{ steps.vars.outputs.stage }}" == "dev" ] && [ -n "${{ github.event.pull_request.number }}" ] && [ "${{ inputs.pr_deployments }}" ]; then
            domain="${{ inputs.app_name }}-pr-${{ github.event.pull_request.number }}.${{ steps.vars.outputs.domain }}"
          else
            domain="${{ inputs.app_name }}.${{ steps.vars.outputs.domain }}"
          fi
          if [ -n "${{ inputs.test_url_path }}" ]; then
            domain="$domain/${{ inputs.test_url_path }}"
          fi
          domain="https://$domain"
          response=$(curl -k -I --silent "$domain" || true)
          echo "$response"
          status_code=$(echo "$response" | grep HTTP | awk '{print $2}')
          if [ "$status_code" -ge 300 ] && [ "$status_code" -ne 405 ]; then
            echo "URL: $domain is not accessible. Status code: $status_code"
            exit 1
          else
            echo "URL is accessible: $domain"
          fi
      - name: Cleanup Kubeconfig
        if: always()
        run: rm -f ~/.kube/config
